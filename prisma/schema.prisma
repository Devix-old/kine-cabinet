generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cabinet {
  id                   String                 @id @default(cuid())
  nom                  String                 @unique
  adresse              String?
  telephone            String?
  email                String?
  siret                String?                @unique
  logo                 String?
  isActive             Boolean                @default(true)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  specialites          String[]               @default([])
  type                 CabinetType            @default(KINESITHERAPIE)
  onboardingCompleted  Boolean                @default(false)
  appointments         Appointment[]
  documents            Document[]
  invoices             Invoice[]
  medicalRecords       MedicalRecord[]
  notes                Note[]
  notificationSettings NotificationSettings[]
  patients             Patient[]
  paymentMethods       PaymentMethod[]
  payments             Payment[]
  rooms                Room[]
  sessions             Session[]
  settings             Settings[]
  subscriptions        Subscription[]
  tarifs               Tarif[]
  treatments           Treatment[]
  usageRecords         UsageRecord[]
  users                User[]
  workingHours         WorkingHours[]

  @@map("cabinets")
}

model User {
  id                    String                @id @default(cuid())
  email                 String
  name                  String
  role                  UserRole              @default(SECRETAIRE)
  password              String
  isActive              Boolean               @default(true)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  lastLogin             DateTime?
  cabinetId             String?
  stripeCustomerId      String?               @unique
  appointmentsCreated   Appointment[]         @relation("AppointmentCreator")
  appointmentsAssigned  Appointment[]         @relation("AppointmentKine")
  medicalRecordsCreated MedicalRecord[]       @relation("MedicalRecordCreator")
  notesCreated          Note[]                @relation("NoteCreator")
  notificationSettings  NotificationSettings?
  paymentMethods        PaymentMethod[]
  treatmentsCreated     Treatment[]           @relation("TreatmentCreator")
  cabinet               Cabinet?              @relation(fields: [cabinetId], references: [id], onDelete: Cascade)

  @@unique([email, cabinetId])
  @@map("users")
}

model Patient {
  id              String          @id @default(cuid())
  numeroDossier   String
  nom             String
  prenom          String
  dateNaissance   DateTime
  sexe            Sexe
  telephone       String?
  email           String?
  adresse         String?
  ville           String?
  codePostal      String?
  pays            String          @default("France")
  profession      String?
  medecinTraitant String?
  antecedents     String?
  allergies       String?
  notesGenerales  String?
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  cabinetId       String
  appointments    Appointment[]
  documents       Document[]
  invoices        Invoice[]
  medicalRecords  MedicalRecord[]
  notes           Note[]
  cabinet         Cabinet         @relation(fields: [cabinetId], references: [id], onDelete: Cascade)
  treatments      Treatment[]

  @@unique([numeroDossier, cabinetId])
  @@map("patients")
}

model Appointment {
  id          String            @id @default(cuid())
  date        DateTime
  duree       Int               @default(30)
  statut      AppointmentStatus @default(PLANIFIE)
  type        AppointmentType   @default(CONSULTATION)
  notes       String?
  motif       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  patientId   String
  kineId      String?
  createdById String
  salleId     String?
  tarifId     String?
  cabinetId   String
  cabinet     Cabinet           @relation(fields: [cabinetId], references: [id], onDelete: Cascade)
  createdBy   User              @relation("AppointmentCreator", fields: [createdById], references: [id])
  kine        User?             @relation("AppointmentKine", fields: [kineId], references: [id])
  patient     Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
  salle       Room?             @relation(fields: [salleId], references: [id])
  tarif       Tarif?            @relation(fields: [tarifId], references: [id])
  invoice     Invoice?
  sessions    Session[]

  @@map("appointments")
}

model Room {
  id           String        @id @default(cuid())
  nom          String
  description  String?
  capacite     Int           @default(1)
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  cabinetId    String
  appointments Appointment[]
  cabinet      Cabinet       @relation(fields: [cabinetId], references: [id], onDelete: Cascade)

  @@unique([nom, cabinetId])
  @@map("rooms")
}

model Treatment {
  id          String          @id @default(cuid())
  nom         String
  description String?
  objectifs   String?
  duree       Int?
  statut      TreatmentStatus @default(ACTIF)
  dateDebut   DateTime        @default(now())
  dateFin     DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  patientId   String
  createdById String
  cabinetId   String
  notes       Note[]
  sessions    Session[]
  cabinet     Cabinet         @relation(fields: [cabinetId], references: [id], onDelete: Cascade)
  createdBy   User            @relation("TreatmentCreator", fields: [createdById], references: [id])
  patient     Patient         @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("treatments")
}

model Session {
  id            String       @id @default(cuid())
  date          DateTime
  duree         Int          @default(30)
  type          SessionType  @default(SEANCE)
  description   String?
  techniques    String?
  observations  String?
  douleur       Int?
  progression   String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  treatmentId   String
  appointmentId String?
  cabinetId     String
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  cabinet       Cabinet      @relation(fields: [cabinetId], references: [id], onDelete: Cascade)
  treatment     Treatment    @relation(fields: [treatmentId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model MedicalRecord {
  id          String            @id @default(cuid())
  titre       String
  description String?
  date        DateTime          @default(now())
  type        MedicalRecordType
  contenu     String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  patientId   String
  createdById String
  cabinetId   String
  documents   Document[]
  cabinet     Cabinet           @relation(fields: [cabinetId], references: [id], onDelete: Cascade)
  createdBy   User              @relation("MedicalRecordCreator", fields: [createdById], references: [id])
  patient     Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("medical_records")
}

model Document {
  id              String         @id @default(cuid())
  nom             String
  type            DocumentType
  url             String
  taille          Int?
  extension       String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  patientId       String?
  medicalRecordId String?
  cabinetId       String
  cabinet         Cabinet        @relation(fields: [cabinetId], references: [id], onDelete: Cascade)
  medicalRecord   MedicalRecord? @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  patient         Patient?       @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model Note {
  id          String     @id @default(cuid())
  titre       String?
  contenu     String
  type        NoteType   @default(GENERALE)
  isPrivee    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  patientId   String?
  treatmentId String?
  createdById String
  cabinetId   String
  cabinet     Cabinet    @relation(fields: [cabinetId], references: [id], onDelete: Cascade)
  createdBy   User       @relation("NoteCreator", fields: [createdById], references: [id])
  patient     Patient?   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  treatment   Treatment? @relation(fields: [treatmentId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model Tarif {
  id           String        @id @default(cuid())
  nom          String
  description  String?
  montant      Float
  duree        Int?
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  cabinetId    String
  appointments Appointment[]
  cabinet      Cabinet       @relation(fields: [cabinetId], references: [id], onDelete: Cascade)

  @@unique([nom, cabinetId])
  @@map("tarifs")
}

model Statistic {
  id       String   @id @default(cuid())
  type     String
  periode  String
  valeur   Float
  date     DateTime @default(now())
  metadata Json?

  @@unique([type, periode, date])
  @@map("statistics")
}

model Settings {
  id          String      @id @default(cuid())
  key         String
  value       String
  type        SettingType @default(STRING)
  description String?
  category    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  cabinetId   String
  cabinet     Cabinet     @relation(fields: [cabinetId], references: [id], onDelete: Cascade)

  @@unique([key, cabinetId])
  @@map("settings")
}

model WorkingHours {
  id             String   @id @default(cuid())
  dayOfWeek      Int
  startTime      String
  endTime        String
  isActive       Boolean  @default(true)
  breakStartTime String?
  breakEndTime   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  cabinetId      String
  cabinet        Cabinet  @relation(fields: [cabinetId], references: [id], onDelete: Cascade)

  @@unique([dayOfWeek, cabinetId])
  @@map("working_hours")
}

model NotificationSettings {
  id                   String   @id @default(cuid())
  userId               String   @unique
  appointmentReminders Boolean  @default(true)
  emailNotifications   Boolean  @default(true)
  pushNotifications    Boolean  @default(false)
  reminderTime         Int      @default(24)
  weeklyReports        Boolean  @default(true)
  monthlyReports       Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  cabinetId            String
  cabinet              Cabinet  @relation(fields: [cabinetId], references: [id], onDelete: Cascade)
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_settings")
}

model Test {
  id          String   @id @default(cuid())
  nom         String
  description String
  statut      String   @default("ACTIF")
  valeur      Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tests")
}

model Invoice {
  id            String        @id @default(cuid())
  numero        String
  montant       Float
  statut        InvoiceStatus @default(EN_ATTENTE)
  dateEmission  DateTime      @default(now())
  dateEcheance  DateTime
  datePaiement  DateTime?
  modePaiement  String?
  notes         String?
  appointmentId String        @unique
  patientId     String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  cabinetId     String
  appointment   Appointment   @relation(fields: [appointmentId], references: [id])
  cabinet       Cabinet       @relation(fields: [cabinetId], references: [id], onDelete: Cascade)
  patient       Patient       @relation(fields: [patientId], references: [id])
  payments      Payment[]

  @@unique([numero, cabinetId])
  @@map("invoices")
}

model Plan {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  price       Float
  currency    String   @default("EUR")
  interval    String   @default("month")
  maxPatients Int
  features    String[]
  isActive    Boolean  @default(true)
  isTrial     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  subscriptions Subscription[]

  @@map("plans")
}

model Subscription {
  id                   String             @id @default(cuid())
  stripeSubscriptionId String?            @unique
  stripeCustomerId     String?
  planId               String
  status               SubscriptionStatus @default(TRIALING)
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean            @default(false)
  canceledAt           DateTime?
  trialStart           DateTime?
  trialEnd             DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  cabinetId            String
  plan                 Plan               @relation(fields: [planId], references: [id])
  payments             Payment[]
  cabinet              Cabinet            @relation(fields: [cabinetId], references: [id], onDelete: Cascade)
  usageRecords         UsageRecord[]

  @@map("subscriptions")
}

model Payment {
  id                    String            @id @default(cuid())
  stripePaymentIntentId String?           @unique
  stripeChargeId        String?
  amount                Float
  currency              String            @default("EUR")
  status                PaymentStatus     @default(PENDING)
  paymentMethod         PaymentMethodType @default(CARD)
  paymentMethodType     String?
  description           String?
  metadata              Json?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  cabinetId             String
  subscriptionId        String?
  invoiceId             String?
  cabinet               Cabinet           @relation(fields: [cabinetId], references: [id], onDelete: Cascade)
  invoice               Invoice?          @relation(fields: [invoiceId], references: [id])
  subscription          Subscription?     @relation(fields: [subscriptionId], references: [id])

  @@map("payments")
}

model PaymentMethod {
  id                    String                @id @default(cuid())
  stripePaymentMethodId String?               @unique
  type                  PaymentMethodTypeEnum @default(CARD)
  cardBrand             String?
  cardLast4             String?
  cardExpMonth          Int?
  cardExpYear           Int?
  billingDetails        Json?
  isDefault             Boolean               @default(false)
  isActive              Boolean               @default(true)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  cabinetId             String
  userId                String
  cabinet               Cabinet               @relation(fields: [cabinetId], references: [id], onDelete: Cascade)
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_methods")
}

model UsageRecord {
  id                  String       @id @default(cuid())
  stripeUsageRecordId String?      @unique
  quantity            Int
  timestamp           DateTime     @default(now())
  action              String       @default("increment")
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  cabinetId           String
  subscriptionId      String
  cabinet             Cabinet      @relation(fields: [cabinetId], references: [id], onDelete: Cascade)
  subscription        Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("usage_records")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  KINE
  SECRETAIRE
}

enum Sexe {
  HOMME
  FEMME
  AUTRE
}

enum AppointmentStatus {
  PLANIFIE
  CONFIRME
  EN_COURS
  TERMINE
  ANNULE
  ABSENT
}

enum AppointmentType {
  CONSULTATION
  SEANCE
  SUIVI
  URGENCE
  DETARTRAGE
  CARIE
  IMPLANT
  ORTHODONTIE
  VISITE
  BILAN
}

enum TreatmentStatus {
  ACTIF
  TERMINE
  INTERROMPU
  EN_PAUSE
}

enum SessionType {
  SEANCE
  EVALUATION
  SUIVI
  REEDUCATION
}

enum MedicalRecordType {
  DIAGNOSTIC
  PRESCRIPTION
  BILAN
  COMPTE_RENDU
  SUIVI
  AUTRE
}

enum DocumentType {
  PDF
  IMAGE
  SCAN
  RADIO
  ANALYSE
  AUTRE
}

enum NoteType {
  GENERALE
  CLINIQUE
  ADMINISTRATIVE
  SUIVI
  URGENCE
}

enum SettingType {
  STRING
  INTEGER
  BOOLEAN
  JSON
}

enum CabinetType {
  KINESITHERAPIE
  DENTAIRE
  MEDICAL_GENERAL
  CARDIOLOGIE
  DERMATOLOGIE
  GYNECOLOGIE
  PEDIATRIE
  PSYCHIATRIE
  OPHTALMOLOGIE
  ORTHOPEDIE
  CHIRURGIE
  RADIOLOGIE
  LABORATOIRE
  PHARMACIE
  AUTRE
}

enum InvoiceStatus {
  EN_ATTENTE
  PAYEE
  EN_RETARD
  ANNULEE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  TRIALING
  UNPAID
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELED
  REQUIRES_ACTION
  REQUIRES_CONFIRMATION
}

enum PaymentMethodType {
  CARD
  BANK_TRANSFER
  CASH
  CHECK
  MOBILE_MONEY
  ELECTRONIC_WALLET
}

enum PaymentMethodTypeEnum {
  CARD
  BANK_ACCOUNT
  SEPA_DEBIT
  IDEAL
  SOFORT
  BANCONTACT
  GIROPAY
  EPS
  P24
  ALIPAY
  WECHAT_PAY
  APPLE_PAY
  GOOGLE_PAY
  LINK
  US_BANK_ACCOUNT
  CASHAPP
  MOBILE_MONEY
  ELECTRONIC_WALLET
}
