const { PrismaClient } = require('@prisma/client')
const { faker } = require('@faker-js/faker')

const prisma = new PrismaClient()

// Configuration fran√ßaise pour Faker
faker.locale = 'fr'

// Donn√©es sp√©cifiques √† la kin√©sith√©rapie
const KINE_DATA = {
  pathologies: [
    'Lombalgie chronique',
    'Entorse de cheville',
    'Tendinite de l\'√©paule',
    'Cervicalgie',
    'Syndrome du canal carpien',
    'R√©√©ducation post-fracture',
    'Arthrose du genou',
    'Sciatique',
    'Torticolis',
    'P√©riarthrite scapulo-hum√©rale',
    'R√©√©ducation post-op√©ratoire',
    'Douleurs dorsales',
    'Contracture musculaire',
    'R√©√©ducation respiratoire',
    'Syndrome de l\'essuie-glace'
  ],

  techniques: [
    'Massage th√©rapeutique',
    'Mobilisation articulaire',
    '√âtirements musculaires',
    'Renforcement musculaire',
    '√âlectroth√©rapie',
    'Cryoth√©rapie',
    'Thermoth√©rapie',
    'Ultrasons',
    'Kin√©sith√©rapie respiratoire',
    'R√©√©ducation proprioceptive',
    'Drainage lymphatique',
    'Techniques de Kabat',
    'M√©thode M√©zi√®res',
    'R√©√©ducation posturale globale',
    'Biofeedback'
  ],

  observations: [
    'Am√©lioration de la mobilit√© articulaire',
    'Diminution des douleurs',
    'R√©cup√©ration progressive de la force',
    'Bonne compliance du patient',
    'R√©duction de l\'inflammation',
    'Am√©lioration de l\'√©quilibre',
    'Progression satisfaisante',
    'Patient motiv√© et coop√©ratif',
    'R√©cup√©ration fonctionnelle en cours',
    'Diminution des contractures',
    'Am√©lioration de la posture',
    'R√©cup√©ration de l\'amplitude articulaire',
    'Renforcement musculaire efficace',
    'Patient assidu aux exercices',
    '√âvolution favorable du traitement'
  ],

  objectifs: [
    'R√©cup√©ration compl√®te de la mobilit√©',
    'Suppression des douleurs',
    'Renforcement de la musculature',
    'Am√©lioration de la posture',
    'Pr√©vention des r√©cidives',
    'Retour aux activit√©s quotidiennes',
    'Am√©lioration de l\'√©quilibre',
    'R√©cup√©ration fonctionnelle',
    'Diminution de l\'inflammation',
    'Am√©lioration de la proprioception',
    'Renforcement du core',
    'Am√©lioration de la coordination',
    'R√©cup√©ration de l\'endurance',
    'Correction des d√©s√©quilibres musculaires',
    '√âducation posturale'
  ],

  professions: [
    'Employ√© de bureau',
    'Ouvrier du b√¢timent',
    'Enseignant',
    'Infirmier',
    'Chauffeur',
    'Coiffeur',
    'Vendeur',
    'M√©canicien',
    'Comptable',
    'Agriculteur',
    '√âlectricien',
    'Cuisinier',
    'Artisan',
    'Secr√©taire',
    'Technicien',
    'Retrait√©',
    '√âtudiant',
    'Sportif professionnel',
    'Kin√©sith√©rapeute',
    'M√©decin'
  ],

  antecedents: [
    'Aucun ant√©c√©dent particulier',
    'Ant√©c√©dents de lombalgie',
    'Chirurgie du genou en 2020',
    'Fracture du poignet en 2019',
    'Entorses de cheville r√©p√©t√©es',
    'Ant√©c√©dents de tendinite',
    'Chirurgie de l\'√©paule',
    'Hernie discale L4-L5',
    'Arthrose familiale',
    'Accident de voiture en 2018',
    'Chute avec traumatisme cr√¢nien',
    'Ant√©c√©dents de fibromyalgie',
    'Scoliose l√©g√®re',
    'Hyperlaxit√© ligamentaire',
    'Ant√©c√©dents sportifs intensifs'
  ]
}

class KineTestDataGenerator {
  constructor() {
    this.cabinetId = null
    this.userId = null
    this.patients = []
    this.appointments = []
    this.treatments = []
    this.rooms = []
  }

  async init() {
    console.log('üè• Initialisation du g√©n√©rateur de donn√©es de test pour cabinet de kin√©sith√©rapie...')
    
    // Trouver un cabinet de kin√©sith√©rapie
    const cabinet = await prisma.cabinet.findFirst({
      where: { type: 'KINESITHERAPIE' },
      include: { users: true }
    })

    if (!cabinet) {
      throw new Error('Aucun cabinet de kin√©sith√©rapie trouv√©. Cr√©ez d\'abord un cabinet de type KINESITHERAPIE.')
    }

    this.cabinetId = cabinet.id
    this.userId = cabinet.users[0]?.id

    if (!this.userId) {
      throw new Error('Aucun utilisateur trouv√© dans le cabinet.')
    }

    console.log(`‚úÖ Cabinet trouv√©: ${cabinet.nom} (ID: ${this.cabinetId})`)
    console.log(`üë§ Utilisateur: ${cabinet.users[0]?.name} (ID: ${this.userId})`)
  }

  async createRooms() {
    console.log('\nüè¢ Cr√©ation des salles de soin...')
    
    const roomsData = [
      { nom: 'Salle 1 - R√©√©ducation', description: 'Salle principale de r√©√©ducation avec √©quipements', capacite: 1 },
      { nom: 'Salle 2 - Massage', description: 'Salle d√©di√©e aux massages th√©rapeutiques', capacite: 1 },
      { nom: 'Salle 3 - √âlectroth√©rapie', description: 'Salle √©quip√©e pour √©lectroth√©rapie et ultrasons', capacite: 1 },
      { nom: 'Gymnase', description: 'Grande salle pour exercices collectifs', capacite: 8 }
    ]

    for (const roomData of roomsData) {
      try {
        const room = await prisma.room.create({
          data: {
            ...roomData,
            cabinetId: this.cabinetId
          }
        })
        this.rooms.push(room)
        console.log(`  ‚úÖ Salle cr√©√©e: ${room.nom}`)
      } catch (error) {
        if (error.code === 'P2002') {
          console.log(`  ‚ö†Ô∏è  Salle d√©j√† existante: ${roomData.nom}`)
          const existingRoom = await prisma.room.findFirst({
            where: { nom: roomData.nom, cabinetId: this.cabinetId }
          })
          this.rooms.push(existingRoom)
        } else {
          console.error(`  ‚ùå Erreur cr√©ation salle ${roomData.nom}:`, error.message)
        }
      }
    }
  }

  async createPatients(count = 15) {
    console.log(`\nüë• Cr√©ation de ${count} patients...`)
    
    for (let i = 0; i < count; i++) {
      const gender = faker.person.sex()
      const firstName = faker.person.firstName(gender)
      const lastName = faker.person.lastName()
      
      const patientData = {
        numeroDossier: `KIN${Date.now()}${i.toString().padStart(3, '0')}`,
        nom: lastName.toUpperCase(),
        prenom: firstName,
        dateNaissance: faker.date.birthdate({ min: 18, max: 85, mode: 'age' }),
        sexe: gender === 'male' ? 'HOMME' : 'FEMME',
        telephone: faker.phone.number('0# ## ## ## ##'),
        email: faker.internet.email({ firstName, lastName }),
        adresse: faker.location.streetAddress(),
        ville: faker.location.city(),
        codePostal: faker.location.zipCode(),
        profession: faker.helpers.arrayElement(KINE_DATA.professions),
        medecinTraitant: `Dr ${faker.person.lastName()}`,
        antecedents: faker.helpers.arrayElement(KINE_DATA.antecedents),
        allergies: Math.random() > 0.7 ? faker.helpers.arrayElement(['Aucune allergie connue', 'Allergie aux anti-inflammatoires', 'Allergie au latex', 'Allergie aux antibiotiques']) : null,
        notesGenerales: Math.random() > 0.5 ? faker.lorem.sentence() : null,
        cabinetId: this.cabinetId
      }

      try {
        const patient = await prisma.patient.create({ data: patientData })
        this.patients.push(patient)
        console.log(`  ‚úÖ Patient cr√©√©: ${patient.prenom} ${patient.nom} (${patient.numeroDossier})`)
      } catch (error) {
        console.error(`  ‚ùå Erreur cr√©ation patient ${firstName} ${lastName}:`, error.message)
      }
    }

    if (this.patients.length === 0) {
      throw new Error('Aucun patient n\'a pu √™tre cr√©√©. V√©rifiez la configuration de la base de donn√©es.')
    }

    console.log(`‚úÖ ${this.patients.length} patients cr√©√©s avec succ√®s`)
  }

  async createAppointments() {
    console.log('\nüìÖ Cr√©ation des rendez-vous...')
    
    const appointmentTypes = ['CONSULTATION', 'SEANCE', 'BILAN', 'SUIVI']
    const today = new Date()
    
    // Cr√©er des RDV pour les 7 derniers jours et les 14 prochains jours
    for (let dayOffset = -7; dayOffset <= 14; dayOffset++) {
      const date = new Date(today)
      date.setDate(today.getDate() + dayOffset)
      
      // Skip weekends
      if (date.getDay() === 0 || date.getDay() === 6) continue
      
      // Nombre de RDV par jour (plus le jour est proche d'aujourd'hui, plus il y a de RDV)
      const appointmentsPerDay = dayOffset === 0 ? 8 : // Aujourd'hui
                                 Math.abs(dayOffset) <= 3 ? 6 : // 3 jours autour
                                 Math.abs(dayOffset) <= 7 ? 4 : 3 // Plus loin

      for (let i = 0; i < appointmentsPerDay; i++) {
        const patient = faker.helpers.arrayElement(this.patients)
        const room = faker.helpers.arrayElement(this.rooms)
        
        // Heures de travail : 8h-12h et 14h-18h
        const isAfternoon = Math.random() > 0.5
        const hour = isAfternoon ? 
          faker.number.int({ min: 14, max: 17 }) : 
          faker.number.int({ min: 8, max: 11 })
        const minute = faker.helpers.arrayElement([0, 15, 30, 45])
        
        const appointmentDate = new Date(date)
        appointmentDate.setHours(hour, minute, 0, 0)
        
        // √âviter les cr√©neaux en conflit
        const existingAppointment = await prisma.appointment.findFirst({
          where: {
            date: appointmentDate,
            salleId: room.id
          }
        })
        
        if (existingAppointment) continue

        const appointmentData = {
          date: appointmentDate,
          duree: faker.helpers.arrayElement([30, 45, 60]),
          statut: dayOffset < 0 ? 'TERMINE' : 
                  dayOffset === 0 ? faker.helpers.arrayElement(['CONFIRME', 'EN_COURS']) :
                  faker.helpers.arrayElement(['PLANIFIE', 'CONFIRME']),
          type: faker.helpers.arrayElement(appointmentTypes),
          motif: faker.helpers.arrayElement(KINE_DATA.pathologies),
          notes: Math.random() > 0.6 ? faker.lorem.sentence() : null,
          patientId: patient.id,
          kineId: this.userId,
          createdById: this.userId,
          salleId: room.id,
          cabinetId: this.cabinetId
        }

        try {
          const appointment = await prisma.appointment.create({ data: appointmentData })
          this.appointments.push(appointment)
          console.log(`  ‚úÖ RDV cr√©√©: ${appointmentDate.toLocaleDateString()} ${appointmentDate.toLocaleTimeString()} - ${patient.prenom} ${patient.nom}`)
        } catch (error) {
          console.error(`  ‚ùå Erreur cr√©ation RDV:`, error.message)
        }
      }
    }
  }

  async createTreatments() {
    console.log('\nüí™ Cr√©ation des traitements...')
    
    // Cr√©er 1-3 traitements par patient
    for (const patient of this.patients) {
      const treatmentCount = faker.number.int({ min: 1, max: 3 })
      
      for (let i = 0; i < treatmentCount; i++) {
        const pathology = faker.helpers.arrayElement(KINE_DATA.pathologies)
        const startDate = faker.date.between({
          from: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // 30 jours avant
          to: new Date()
        })
        
        const treatmentData = {
          nom: `Traitement - ${pathology}`,
          description: `Prise en charge de ${pathology.toLowerCase()} chez ${patient.prenom} ${patient.nom}`,
          objectifs: faker.helpers.arrayElements(KINE_DATA.objectifs, { min: 2, max: 4 }).join(', '),
          duree: faker.number.int({ min: 10, max: 30 }), // Dur√©e en s√©ances
          statut: faker.helpers.arrayElement(['ACTIF', 'TERMINE', 'EN_PAUSE']),
          dateDebut: startDate,
          dateFin: Math.random() > 0.6 ? faker.date.future({ refDate: startDate }) : null,
          patientId: patient.id,
          createdById: this.userId,
          cabinetId: this.cabinetId
        }

        try {
          const treatment = await prisma.treatment.create({ data: treatmentData })
          this.treatments.push(treatment)
          console.log(`  ‚úÖ Traitement cr√©√©: ${treatment.nom} pour ${patient.prenom} ${patient.nom}`)
        } catch (error) {
          console.error(`  ‚ùå Erreur cr√©ation traitement:`, error.message)
        }
      }
    }
  }

  async createSessions() {
    console.log('\nüèÉ Cr√©ation des s√©ances...')
    
    for (const treatment of this.treatments) {
      const sessionCount = faker.number.int({ min: 5, max: 15 })
      
      for (let i = 0; i < sessionCount; i++) {
        const sessionDate = faker.date.between({
          from: treatment.dateDebut,
          to: treatment.dateFin || new Date()
        })
        
        const sessionData = {
          date: sessionDate,
          duree: faker.helpers.arrayElement([30, 45, 60]),
          type: faker.helpers.arrayElement(['SEANCE', 'EVALUATION', 'REEDUCATION']),
          description: `S√©ance n¬∞${i + 1} - ${faker.helpers.arrayElement(KINE_DATA.techniques)}`,
          techniques: faker.helpers.arrayElements(KINE_DATA.techniques, { min: 2, max: 4 }).join(', '),
          observations: faker.helpers.arrayElement(KINE_DATA.observations),
          douleur: faker.number.int({ min: 0, max: 10 }),
          progression: faker.helpers.arrayElement([
            'Progression satisfaisante',
            'Am√©lioration notable',
            '√âvolution lente mais positive',
            'Stagnation temporaire',
            'Tr√®s bonne √©volution'
          ]),
          treatmentId: treatment.id,
          cabinetId: this.cabinetId
        }

        try {
          const session = await prisma.session.create({ data: sessionData })
          console.log(`  ‚úÖ S√©ance cr√©√©e: ${session.description}`)
        } catch (error) {
          console.error(`  ‚ùå Erreur cr√©ation s√©ance:`, error.message)
        }
      }
    }
  }

  async createMedicalRecords() {
    console.log('\nüìã Cr√©ation des dossiers m√©dicaux...')
    
    const recordTypes = ['DIAGNOSTIC', 'PRESCRIPTION', 'BILAN', 'COMPTE_RENDU', 'SUIVI']
    
    for (const patient of this.patients) {
      const recordCount = faker.number.int({ min: 2, max: 5 })
      
      for (let i = 0; i < recordCount; i++) {
        const recordType = faker.helpers.arrayElement(recordTypes)
        
        const recordData = {
          titre: this.generateRecordTitle(recordType, patient),
          description: this.generateRecordDescription(recordType),
          date: faker.date.between({
            from: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000), // 60 jours avant
            to: new Date()
          }),
          type: recordType,
          contenu: this.generateRecordContent(recordType, patient),
          patientId: patient.id,
          createdById: this.userId,
          cabinetId: this.cabinetId
        }

        try {
          const record = await prisma.medicalRecord.create({ data: recordData })
          console.log(`  ‚úÖ Dossier m√©dical cr√©√©: ${record.titre} pour ${patient.prenom} ${patient.nom}`)
        } catch (error) {
          console.error(`  ‚ùå Erreur cr√©ation dossier m√©dical:`, error.message)
        }
      }
    }
  }

  async createDocuments() {
    console.log('\nüìÑ Cr√©ation des documents...')
    
    const documentTypes = ['PDF', 'IMAGE', 'SCAN', 'RADIO']
    const documentNames = [
      'Ordonnance m√©dicale',
      'Radio du genou',
      'Compte-rendu IRM',
      'Bilan kin√©sith√©rapique',
      'Prescription m√©dicale',
      '√âchographie',
      'Scanner lombaire',
      'Bilan sanguin',
      'Certificat m√©dical',
      'Arr√™t de travail'
    ]
    
    for (const patient of this.patients) {
      const documentCount = faker.number.int({ min: 1, max: 4 })
      
      for (let i = 0; i < documentCount; i++) {
        const docType = faker.helpers.arrayElement(documentTypes)
        const docName = faker.helpers.arrayElement(documentNames)
        
        const documentData = {
          nom: `${docName} - ${patient.prenom} ${patient.nom}`,
          type: docType,
          url: `/documents/${faker.string.uuid()}.${docType.toLowerCase() === 'pdf' ? 'pdf' : 'jpg'}`,
          taille: faker.number.int({ min: 100000, max: 5000000 }), // Taille en bytes
          extension: docType.toLowerCase() === 'pdf' ? '.pdf' : '.jpg',
          patientId: patient.id,
          cabinetId: this.cabinetId
        }

        try {
          const document = await prisma.document.create({ data: documentData })
          console.log(`  ‚úÖ Document cr√©√©: ${document.nom}`)
        } catch (error) {
          console.error(`  ‚ùå Erreur cr√©ation document:`, error.message)
        }
      }
    }
  }

  async createNotes() {
    console.log('\nüìù Cr√©ation des notes...')
    
    const noteTypes = ['GENERALE', 'CLINIQUE', 'SUIVI']
    
    // Notes g√©n√©rales sur les patients
    for (const patient of this.patients) {
      const noteCount = faker.number.int({ min: 1, max: 3 })
      
      for (let i = 0; i < noteCount; i++) {
        const noteType = faker.helpers.arrayElement(noteTypes)
        
        const noteData = {
          titre: this.generateNoteTitle(noteType, patient),
          contenu: this.generateNoteContent(noteType, patient),
          type: noteType,
          isPrivee: Math.random() > 0.8,
          patientId: patient.id,
          createdById: this.userId,
          cabinetId: this.cabinetId
        }

        try {
          const note = await prisma.note.create({ data: noteData })
          console.log(`  ‚úÖ Note cr√©√©e: ${note.titre}`)
        } catch (error) {
          console.error(`  ‚ùå Erreur cr√©ation note:`, error.message)
        }
      }
    }

    // Notes sur les traitements
    for (const treatment of this.treatments.slice(0, 10)) { // Limiter √† 10 traitements
      const noteData = {
        titre: `Note de traitement - ${treatment.nom}`,
        contenu: `Suivi du traitement: ${faker.helpers.arrayElement(KINE_DATA.observations)}. ${faker.lorem.paragraph()}`,
        type: 'SUIVI',
        isPrivee: false,
        treatmentId: treatment.id,
        createdById: this.userId,
        cabinetId: this.cabinetId
      }

      try {
        const note = await prisma.note.create({ data: noteData })
        console.log(`  ‚úÖ Note de traitement cr√©√©e: ${note.titre}`)
      } catch (error) {
        console.error(`  ‚ùå Erreur cr√©ation note de traitement:`, error.message)
      }
    }
  }

  generateRecordTitle(type, patient) {
    const titles = {
      DIAGNOSTIC: `Diagnostic kin√©sith√©rapique - ${patient.prenom} ${patient.nom}`,
      PRESCRIPTION: `Prescription de soins - ${faker.helpers.arrayElement(KINE_DATA.pathologies)}`,
      BILAN: `Bilan kin√©sith√©rapique initial - ${patient.prenom} ${patient.nom}`,
      COMPTE_RENDU: `Compte-rendu de traitement - ${faker.helpers.arrayElement(KINE_DATA.pathologies)}`,
      SUIVI: `Suivi de traitement - ${patient.prenom} ${patient.nom}`
    }
    return titles[type] || `Dossier m√©dical - ${patient.prenom} ${patient.nom}`
  }

  generateRecordDescription(type) {
    const descriptions = {
      DIAGNOSTIC: '√âvaluation initiale et diagnostic kin√©sith√©rapique du patient',
      PRESCRIPTION: 'Prescription m√©dicale pour soins de kin√©sith√©rapie',
      BILAN: 'Bilan complet des capacit√©s fonctionnelles et des d√©ficiences',
      COMPTE_RENDU: 'Compte-rendu d√©taill√© de l\'√©volution du traitement',
      SUIVI: 'Note de suivi de l\'√©volution du patient'
    }
    return descriptions[type] || 'Document m√©dical'
  }

  generateRecordContent(type, patient) {
    const pathology = faker.helpers.arrayElement(KINE_DATA.pathologies)
    const technique = faker.helpers.arrayElement(KINE_DATA.techniques)
    
    const contents = {
      DIAGNOSTIC: `Patient: ${patient.prenom} ${patient.nom}
      
Motif de consultation: ${pathology}
Ant√©c√©dents: ${patient.antecedents}

Examen clinique:
- Douleur: ${faker.number.int({ min: 3, max: 8 })}/10
- Amplitude articulaire: Limit√©e
- Force musculaire: Diminu√©e
- Mobilit√©: R√©duite

Diagnostic kin√©sith√©rapique: ${pathology}
Plan de traitement: ${faker.helpers.arrayElements(KINE_DATA.techniques, 3).join(', ')}`,

      PRESCRIPTION: `Prescription m√©dicale pour ${patient.prenom} ${patient.nom}
      
Diagnostic m√©dical: ${pathology}
Prescription: 15 s√©ances de kin√©sith√©rapie
Techniques recommand√©es: ${technique}
Fr√©quence: 3 s√©ances par semaine
Dur√©e: 5 semaines`,

      BILAN: `Bilan kin√©sith√©rapique - ${patient.prenom} ${patient.nom}
      
√âtat initial:
- Douleur: ${faker.number.int({ min: 5, max: 9 })}/10
- Mobilit√©: Tr√®s limit√©e
- Force: Faible
- Fonctionnalit√©: Alt√©r√©e

Objectifs de traitement:
${faker.helpers.arrayElements(KINE_DATA.objectifs, 3).join('\n')}

Plan de traitement: ${faker.number.int({ min: 10, max: 20 })} s√©ances`,

      COMPTE_RENDU: `Compte-rendu de traitement - ${patient.prenom} ${patient.nom}
      
Pathologie trait√©e: ${pathology}
Nombre de s√©ances effectu√©es: ${faker.number.int({ min: 8, max: 15 })}
Techniques utilis√©es: ${faker.helpers.arrayElements(KINE_DATA.techniques, 3).join(', ')}

√âvolution:
${faker.helpers.arrayElement(KINE_DATA.observations)}
Douleur actuelle: ${faker.number.int({ min: 0, max: 4 })}/10

Recommandations: Poursuite du traitement, exercices √† domicile`,

      SUIVI: `Note de suivi - ${patient.prenom} ${patient.nom}
      
Date: ${new Date().toLocaleDateString()}
√âvolution: ${faker.helpers.arrayElement(KINE_DATA.observations)}
Observations: ${faker.lorem.paragraph()}
Prochaine √©tape: ${faker.helpers.arrayElement(KINE_DATA.objectifs)}`
    }
    
    return contents[type] || faker.lorem.paragraphs(2)
  }

  generateNoteTitle(type, patient) {
    const titles = {
      GENERALE: `Note g√©n√©rale - ${patient.prenom} ${patient.nom}`,
      CLINIQUE: `Observation clinique - ${faker.helpers.arrayElement(KINE_DATA.pathologies)}`,
      SUIVI: `Suivi patient - ${patient.prenom} ${patient.nom}`
    }
    return titles[type] || `Note - ${patient.prenom} ${patient.nom}`
  }

  generateNoteContent(type, patient) {
    const contents = {
      GENERALE: `Patient ${patient.prenom} ${patient.nom} - ${faker.lorem.paragraph()}`,
      CLINIQUE: `Observation clinique: ${faker.helpers.arrayElement(KINE_DATA.observations)}. ${faker.lorem.sentence()}`,
      SUIVI: `Suivi de l'√©volution: ${faker.helpers.arrayElement(KINE_DATA.observations)}. ${faker.lorem.paragraph()}`
    }
    return contents[type] || faker.lorem.paragraph()
  }

  async generateStats() {
    console.log('\nüìä Statistiques g√©n√©r√©es:')
    
    const stats = {
      patients: await prisma.patient.count({ where: { cabinetId: this.cabinetId } }),
      appointments: await prisma.appointment.count({ where: { cabinetId: this.cabinetId } }),
      treatments: await prisma.treatment.count({ where: { cabinetId: this.cabinetId } }),
      sessions: await prisma.session.count({ where: { cabinetId: this.cabinetId } }),
      medicalRecords: await prisma.medicalRecord.count({ where: { cabinetId: this.cabinetId } }),
      documents: await prisma.document.count({ where: { cabinetId: this.cabinetId } }),
      notes: await prisma.note.count({ where: { cabinetId: this.cabinetId } }),
      rooms: await prisma.room.count({ where: { cabinetId: this.cabinetId } })
    }

    console.log(`  üë• Patients: ${stats.patients}`)
    console.log(`  üìÖ Rendez-vous: ${stats.appointments}`)
    console.log(`  üí™ Traitements: ${stats.treatments}`)
    console.log(`  üèÉ S√©ances: ${stats.sessions}`)
    console.log(`  üìã Dossiers m√©dicaux: ${stats.medicalRecords}`)
    console.log(`  üìÑ Documents: ${stats.documents}`)
    console.log(`  üìù Notes: ${stats.notes}`)
    console.log(`  üè¢ Salles: ${stats.rooms}`)

    return stats
  }

  async run() {
    try {
      await this.init()
      await this.createRooms()
      await this.createPatients(15) // 15 patients
      await this.createAppointments()
      await this.createTreatments()
      await this.createSessions()
      await this.createMedicalRecords()
      await this.createDocuments()
      await this.createNotes()
      
      const stats = await this.generateStats()
      
      console.log('\nüéâ G√©n√©ration de donn√©es de test termin√©e avec succ√®s!')
      console.log('\nüí° Vous pouvez maintenant:')
      console.log('  - Consulter vos patients dans l\'interface')
      console.log('  - Voir les rendez-vous d\'aujourd\'hui et √† venir')
      console.log('  - Examiner les traitements en cours')
      console.log('  - Consulter les dossiers m√©dicaux')
      console.log('  - Tester toutes les fonctionnalit√©s du cabinet')
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration:', error)
      throw error
    } finally {
      await prisma.$disconnect()
    }
  }
}

// Ex√©cution du script
async function main() {
  const generator = new KineTestDataGenerator()
  await generator.run()
}

// V√©rifier si le script est ex√©cut√© directement
if (require.main === module) {
  main().catch(console.error)
}

module.exports = KineTestDataGenerator
